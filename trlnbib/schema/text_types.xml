<!--    ............................
        :     Text types           :
        ............................

-->

<fieldType name="text" class="solr.TextField" positionIncrementGap="&tpig;"
           autoGeneratePhraseQueries="true">
  <analyzer type="index">
    &char_filters;
    &basic_text_chain_with_synonyms;
    <!-- At index time WordDelimiterGraphFilter must be followed with a
    FlattenGraphFilter to squash tokens on top of one another
    because the indexer can’t directly consume a graph. -->
    <filter class="solr.FlattenGraphFilterFactory"/>
    &stemmer;
  </analyzer>
  <analyzer type="query">
    &char_filters;
    &basic_text_chain;
    &stemmer;
  </analyzer>
</fieldType>

<fieldType name="text_nostem" class="solr.TextField" positionIncrementGap="&tpig;"
           autoGeneratePhraseQueries="true">
  <analyzer type="index">
    &char_filters;
    &basic_text_chain_with_synonyms;
    <!-- At index time WordDelimiterGraphFilter must be followed with a
    FlattenGraphFilter to squash tokens on top of one another
    because the indexer can’t directly consume a graph. -->
    <filter class="solr.FlattenGraphFilterFactory"/>
    <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
  </analyzer>
  <analyzer type="query">
    &char_filters;
    &basic_text_chain;
    <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
  </analyzer>
</fieldType>

<!-- text_l- A left-anchored text type, that only matches if it the query matches
     the indexed value starting at the left hand side.

     For this one, we have to use the whitespace tokenizer because ICU tokenizer will
     split on character codepoint changes, and there isn't a character we can use for
     the prefix (here, 'aaaaa') that wouldn't result in a codepoint change and thus mess
     up mm settings in (e)dismax request handlers.

     Note that this means that fields of type text_l will potentially have a different
     number of tokens than those of type text, so you should probably (once again) only
     use this with phrase searches.

-->
<fieldType name="text_leftjustified" class="solr.TextField" positionIncrementGap="&tpig;">
  <analyzer type="index">
    &char_filters;
    <charFilter class="solr.PatternReplaceCharFilterFactory"
                pattern="^\p{Punct}*(.*?)\p{Punct}*$" replacement="aaaaa$1" />
    &basic_text_chain;
    <!-- At index time WordDelimiterGraphFilter must be followed with a
    FlattenGraphFilter to squash tokens on top of one another
    because the indexer can’t directly consume a graph. -->
    <filter class="solr.FlattenGraphFilterFactory"/>
    <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
  </analyzer>
  <analyzer type="query">
    &char_filters;
    <charFilter class="solr.PatternReplaceCharFilterFactory"
                pattern="^\p{Punct}*(.*?)\p{Punct}*$" replacement="aaaaa$1" />
    &basic_text_chain;
    <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
  </analyzer>
</fieldType>


<!-- Text type field with basic tokenization, retains punctuation for
    "text" matching against misc-type ID fields. -->
<!-- On client side, Lucene query parser breaks things up by whitespace -->
<!-- *before* field analysis for edismax so punctuation terms (& : ;) are stopwords -->
<!-- to allow results from other fields when these chars are surrounded by spaces in query -->
<fieldType name="exactish" class="solr.TextField" positionIncrementGap="&tpig;">
  <analyzer type="index">
    <tokenizer class="solr.WhitespaceTokenizerFactory"/>
    <filter class="solr.ICUFoldingFilterFactory"/>
    <filter class="solr.TrimFilterFactory"/>
    <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
  </analyzer>
  <analyzer type="query">
    <tokenizer class="solr.WhitespaceTokenizerFactory"/>
    <filter class="solr.ICUFoldingFilterFactory"/>
    <filter class="solr.TrimFilterFactory"/>
    <!-- removing punctuation for Lucene query parser issues -->
    <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_punctuation.txt" />
    <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
  </analyzer>
</fieldType>

<fieldType name="text_suggest" class="solr.TextField" positionIncrementGap="&tpig;">
  <analyzer>
    <tokenizer class="solr.StandardTokenizerFactory"/>
    <filter class="solr.StandardFilterFactory"/>
    <filter class="solr.LowerCaseFilterFactory"/>
  </analyzer>
</fieldType>

